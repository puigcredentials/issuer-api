plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.5'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'jacoco'
	id 'org.sonarqube' version '5.0.0.4638'
	id 'checkstyle'
	id 'org.owasp.dependencycheck' version '9.1.0'
	id 'com.github.ben-manes.versions' version "0.51.0"
	id 'se.patrikerdes.use-latest-versions' version '0.2.18'
}

group = 'es.puig'
version = '1.0.0'

java {
	sourceCompatibility = '17'
}

jacoco {
	toolVersion = "0.8.11"
}

checkstyle {
	configFile = file("${rootDir}/config/checkstyle/checkstyle.xml")
}

checkstyleMain {
	source ='src/main/java'
}

checkstyleTest {
	source ='src/test/java'
}

sonar {
	properties {
		property "sonar.projectName", "Issuer API"
		property "sonar.projectKey", "puigcredentials_issuer-api"
		property "sonar.organization", "puigcredentials"
		property "sonar.host.url", "https://sonarcloud.io"
		property "sonar.coverage.exclusions",
				"src/main/java/es/puig/issuer/IssuerApiApplication.java, "
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2023.0.0")
}

dependencies {
	// Spring
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
	implementation 'org.springframework.boot:spring-boot-starter-mail:3.2.5'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf:3.2.5'

	// EUDI Wallet libraries
	implementation 'eu.europa.ec.eudi:eudi-lib-jvm-openid4vci-kt:0.1.3'

	// JSON
	implementation 'com.fasterxml.jackson.core:jackson-databind'
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
	implementation 'com.fasterxml.jackson.core:jackson-databind:2.17.0'
	implementation 'com.fasterxml.jackson.core:jackson-annotations:2.17.0'
	implementation 'com.fasterxml.jackson.core:jackson-core:2.17.0'

	// CBOR implementation
	implementation 'com.upokecenter:cbor:4.5.2'
	implementation 'com.augustcellars.cose:cose-java:1.1.0'
	implementation 'org.apache.commons:commons-compress:1.26.1'
	implementation 'io.github.ehn-digital-green-development:base45:0.0.3'

	// Proof decoding
	implementation 'io.github.novacrypto:Base58:2022.01.17'

	// Persistence
	implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
	implementation 'org.springframework:spring-jdbc'
	runtimeOnly 'org.postgresql:r2dbc-postgresql'
	runtimeOnly 'org.postgresql:postgresql'
	implementation 'org.flywaydb:flyway-core'

	// In-Memory Persistence
	implementation 'com.google.guava:guava:33.1.0-jre'

	// DevTools
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	implementation 'org.jetbrains:annotations:24.1.0'
	implementation 'com.google.code.findbugs:jsr305:3.0.2'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// Nimbus JWT
	implementation 'com.nimbusds:nimbus-jose-jwt:9.38-rc3'
	implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.5'

	// AZURE
	implementation('com.azure.spring:spring-cloud-azure-starter-appconfiguration:5.7.0')
	implementation('com.azure.spring:spring-cloud-azure-starter-keyvault-secrets:5.7.0')

	// Documentation
	implementation 'org.springdoc:springdoc-openapi-starter-webflux-ui:2.5.0'

	// Logback
	implementation 'net.logstash.logback:logstash-logback-encoder:7.4'

	// Monitoring
	implementation 'io.micrometer:micrometer-tracing-bridge-brave'
	runtimeOnly 'io.micrometer:micrometer-registry-prometheus'

	// Resilience
	implementation 'org.springframework.cloud:spring-cloud-starter-circuitbreaker-reactor-resilience4j'

	// Unit Testing
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation 'org.springframework.boot:spring-boot-starter-aop'
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.2'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.2'
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation 'io.mockk:mockk:1.13.10'
	testImplementation 'org.mockito:mockito-inline:5.2.0'
	testImplementation 'com.squareup.okhttp3:mockwebserver:4.12.0'
	testImplementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.17.0-rc1'

	// Integration Test
	testImplementation 'org.springframework.boot:spring-boot-testcontainers'
	testImplementation 'org.testcontainers:junit-jupiter'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

configurations.configureEach {
	exclude module: 'slf4j-simple'
}

tasks.named('compileJava') {
	inputs.files(tasks.named('processResources'))
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy(tasks.jacocoTestReport)
}

tasks.jacocoTestReport {
	dependsOn(tasks.test)
	reports {
		xml.required.set(true)
		csv.required.set(false)
		html.outputLocation.set(layout.buildDirectory.dir("jacocoHtml"))
	}
	classDirectories.setFrom(files(classDirectories.files.collect {
		fileTree(dir: it, exclude: [
				"**/IssuerApiApplication.class",
				"**/IssuerVciBackendApplication**",
				"**/CredentialResponseErrorCodes**",
				"**/configurations/**",
				"**/handler/**",
				"**/**Serializer**/**",
				"**/enums/**",
				"**/Constants**"
		])
	}))
}

tasks.register('printVersion') {
	doLast {
		println version
	}
}

tasks.register('printProjectName') {
	doLast {
		println rootProject.name
	}
}

def isNonStable = { String version ->
	def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
	def regex = /^[0-9,.v-]+(-r)?$/
	return !stableKeyword && !(version ==~ regex)
}

tasks.named("dependencyUpdates").configure {
	rejectVersionIf {
		isNonStable(it.candidate.version)
	}
}
